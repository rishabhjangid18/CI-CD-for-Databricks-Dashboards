name: Databricks AI/BI Dashboard CI/CD

on:
  push:
    branches:
      - main      # Production deployment
      - uat       # UAT deployment
      - dev       # Development deployment
    paths:
      - '*.lvdash.json'
      - '.github/workflows/databricks-dashboard-cicd.yml'
  pull_request:
    branches:
      - main      # PR to main (UAT → Production)
      - uat       # PR to uat (dev → UAT)
      - dev       # PR to dev (feature → dev)
    paths:
      - '*.lvdash.json'
      - '.github/workflows/databricks-dashboard-cicd.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - uat
        - prod

env:
  PYTHON_VERSION: '3.9'

jobs:
  validate:
    name: Validate Dashboard Files
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        pip install databricks-cli databricks-sdk pyyaml jsonschema
        
    - name: Validate dashboard JSON files
      run: |
        python scripts/validate_dashboards.py
        
    - name: Validate SQL queries
      run: |
        python scripts/validate_queries.py

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Databricks CLI
      run: |
        pip install databricks-cli databricks-sdk
        
    - name: Configure Databricks CLI for Dev
      run: |
        databricks configure --host ${{ secrets.DATABRICKS_DEV_HOST }} --token
      env:
        DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_DEV_TOKEN }}
        
    - name: Deploy dashboards to Dev
      run: |
        python scripts/deploy_dashboards.py --environment dev
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_DEV_HOST }}
        DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_DEV_SP_CLIENT_ID }}
        DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_DEV_SP_CLIENT_SECRET }}
        
    - name: Run dashboard tests
      run: |
        python scripts/test_dashboards.py --environment dev
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_DEV_HOST }}
        DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_DEV_SP_CLIENT_ID }}
        DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_DEV_SP_CLIENT_SECRET }}

  deploy-uat:
    name: Deploy to UAT
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/uat' && github.event_name == 'push' || github.event.inputs.environment == 'uat'
    environment: uat
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Databricks CLI
      run: |
        pip install databricks-cli databricks-sdk
        
    - name: Deploy dashboards to UAT
      run: |
        python scripts/deploy_dashboards.py --environment uat
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_UAT_HOST }}
        DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_UAT_SP_CLIENT_ID }}
        DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_UAT_SP_CLIENT_SECRET }}
        
    - name: Run UAT tests
      run: |
        python scripts/test_dashboards.py --environment uat
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_UAT_HOST }}
        DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_UAT_SP_CLIENT_ID }}
        DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_UAT_SP_CLIENT_SECRET }}

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event.inputs.environment == 'prod'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Databricks CLI
      run: |
        pip install databricks-cli databricks-sdk
        
    - name: Create backup of existing dashboards
      run: |
        python scripts/backup_dashboards.py --environment prod
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_PROD_HOST }}
        DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_PROD_SP_CLIENT_ID }}
        DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_PROD_SP_CLIENT_SECRET }}
        
    - name: Deploy dashboards to Production
      run: |
        python scripts/deploy_dashboards.py --environment prod
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_PROD_HOST }}
        DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_PROD_SP_CLIENT_ID }}
        DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_PROD_SP_CLIENT_SECRET }}
        
    - name: Run production smoke tests
      run: |
        python scripts/test_dashboards.py --environment prod --smoke-only
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_PROD_HOST }}
        DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_PROD_SP_CLIENT_ID }}
        DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_PROD_SP_CLIENT_SECRET }}
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "Production deployment completed successfully"
        
    - name: Rollback on failure
      if: failure()
      run: |
        python scripts/rollback_dashboards.py --environment prod
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_PROD_HOST }}
        DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_PROD_SP_CLIENT_ID }}
        DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_PROD_SP_CLIENT_SECRET }}

---
